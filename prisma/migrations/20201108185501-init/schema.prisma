generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model User {
  id                                         Int              @id @default(autoincrement())
  email                                      String           @unique
  username                                   String           @unique
  //for google auth
  googleId                                   String?          @unique
  //for one time password request token
  loginSecret                                String?
  avatar                                     String?          @default("https://res.cloudinary.com/iib-webdevs/image/upload/v1601031013/DontDeleteMe/pngtree-businessman-user-avatar-free-vector-png-image_1538405.jpg")
  password                                   String?
  OneTimePassword                            Int?
  PasswordResetTokenExpiry                   Float?
  PasswordResetToken                         String?
  MessagesSent                               Messages[]       @relation("Sender")
  MessagesRecieved                           Messages[]       @relation("Reciever")
  FriendRequsetSent                          FriendsRequest[] @relation("RequestSender")
  FriendRequestRecieved                      FriendsRequest[] @relation("RequestReciever")
  followedBy                                 User[]           @relation("UserFollows", references: [id])
  following                                  User[]           @relation("UserFollows", references: [id])
  friends                                    User[]           @relation("UserFirends")
  friend                                     User?            @relation("UserFirends",fields: [friendId], references: [id])
  friendId                                   Int?
  isActive                                   Boolean          @default(false)
  lastSeen                                   String?
  reactions                                  Reaction[]
  temporaryBlockOtherUserOnDeleteChatBlocker temporaryBlockOtherUserOnDeleteChat[] @relation("ChatMessageSender")
  temporaryBlockOtherUserOnDeleteChatBlockee temporaryBlockOtherUserOnDeleteChat[] @relation("ChatMessageReceiver")
  BlockedMessagesIds                         Int[]
  createdAt                                  DateTime         @default(now())
  updatedAt                                  DateTime         @updatedAt
}

model temporaryBlockOtherUserOnDeleteChat {
  id                      Int      @id @default(autoincrement())
  blocker                 User     @relation("ChatMessageSender", fields: [blockerId], references: [id])
  blockerId               Int
  blockee                 User     @relation("ChatMessageReceiver", fields: [blockeeId], references: [id])
  blockeeId               Int
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt


}

model Messages {
  id                 Int      @id @default(autoincrement())
  content            String?
  image              String?
  from               User     @relation("Sender", fields: [SenderId], references: [id])
  SenderId           Int
  to                 User     @relation("Reciever", fields: [ReceiverId], references: [id])
  ReceiverId         Int
  isSenderFriend     Boolean  @default(false)
  isSenderFollowing  Boolean  @default(false)
  isSenderFollowedBy Boolean  @default(false)
  forwarded          Boolean  @default(false)
  reactions          Reaction[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

}

model Reaction {
  id                 Int      @id @default(autoincrement())
  user               User     @relation(fields: [userId], references: [id])
  userId             Int
  message            Messages @relation(fields:[messageId] , references:[id])
  messageId          Int
  content            String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

}

model FriendsRequest {
  id                Int      @id @default(autoincrement())
  sender             User     @relation("RequestSender", fields: [RequsetSenderId], references: [id])
  RequsetSenderId   Int
  reciever            User     @relation("RequestReciever", fields: [RequestReceiverId], references: [id])
  RequestReceiverId Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

